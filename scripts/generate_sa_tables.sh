#! /usr/bin/env bash

set -eo pipefail

# All references to an external script should be relative to the location of this script.
# See: http://mywiki.wooledge.org/BashFAQ/028
CURRENT_LOCATION="${BASH_SOURCE%/*}"


################################################################################
#                                    Imports                                   #
################################################################################

source "${CURRENT_LOCATION}/generate_tables_helper.sh"

################################################################################
#                            Variables and options                             #
################################################################################

# Directory used to store temporary files in
TEMP_DIR="/tmp"

DB_TYPES="swissprot,trembl"

# Constant string used to indicate temp files generated by Unipept
UNIPEPT_TEMP_CONSTANT="unipept_temp"

# Make sure that all temporary files are cleaned up if something goes wrong during execution of this script
trap terminateAndExit SIGINT
trap errorAndExit ERR
trap clean EXIT

################################################################################
#                           TABLE GENERATION FUNCTIONS                         #
#                                                                              #
# This section contains functions responsible for generating the required      #
# tables within the script. These functions handle all the necessary logic     #
# and operations to build and manage the data tables.                          #
################################################################################

################################################################################
# download_and_process_uniprot                                                 #
#                                                                              #
# Downloads and parses UniProtKB databases specified as a comma-separated list #
# in the first argument ($1). The function supports "swissprot" and "trembl".  #
# For each database type, it attempts to download, decompress, and convert it  #
# to a tabular format, storing the result in a compressed file in the output   #
# directory.                                                                   #
#                                                                              #
# Globals:                                                                     #
#   SOURCE_URLS       - Associative array mapping database types to download   #
#                       URLs                                                   #
#   CMD_LZ4           - Command or path to the lz4 binary                      #
#   CURRENT_LOCATION  - Current script directory                               #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Comma-separated list of database sources to download. Supported       #
#        values are "swissprot" and "trembl".                                  #
#   $2 - Temporary directory used to store intermediate files                  #
#   $3 - Temporary constant to identify this script's files in the temp dir    #
#                                                                              #
# Outputs:                                                                     #
#   uniprot_raw.tsv.lz4 for each database type                                 #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
download_and_process_uniprot() {
  local old_ifs="$IFS"
  IFS=","
  local db_types_array=($1)
  IFS="$old_ifs"

  local temp_dir="$2"
  local temp_constant="$3"

  local idx=0

  while [[ "$idx" -ne "${#db_types_array}" ]] && [[ -n $(echo "${db_types_array[$idx]}" | sed "s/\s//g") ]]
  do
    local db_type=${db_types_array[$idx]}
    local db_source=${SOURCE_URLS["$db_type"]}

    log "Started downloading and parsing UniProtKB - $db_type."

    # Where should we store the index of this converted database.
    local db_output_dir="${temp_dir:?}/${temp_constant}/$db_type"

    # Remove previous database (if it exist) and continue building the new database.
    rm -rf "$db_output_dir"
    mkdir -p "$db_output_dir"

    # Extract the total size of the database that's being downloaded. This is required for pv to know which percentage
    # of the total download has been processed.
    local size="$(curl -I "$db_source" -s | grep -i content-length | tr -cd '[0-9]')"

    # Effectively download the database and convert to a tabular format
    curl --continue-at - --create-dirs "$db_source" --silent | pv -i 5 -n -s "$size" 2> >(reportProgress - "Downloading and parsing database for $db_type" >&2) | pigz -dc | "$CURRENT_LOCATION"/helper_scripts/dat-parser -t "$db_type" | $CMD_LZ4 > "${db_output_dir}/uniprot_raw.tsv.lz4"

    log "Finished downloading and parsing UniProtKB - $db_type."

    idx=$((idx + 1))
  done
}

################################################################################
# generate_uniprot_entries                                                     #
#                                                                              #
# Reads a raw, compressed UniProt TSV file (as generated by the                #
# download_and_process_uniprot function) provided as the first argument ($1)   #
# and produces the uniprot_entries.tsv.lz4 file as a result.                   #
#                                                                              #
# Globals:                                                                     #
#   CURRENT_LOCATION   - Current script directory                              #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Comma-separated list of database sources to download. Supported       #
#        values are "swissprot" and "trembl".                                  #
#   $2 - Temporary directory used to store intermediate files                  #
#   $3 - Temporary constant to identify this script's files in the temp dir    #
#   $4 - Output directory where the resulting files will be created            #
#                                                                              #
# Outputs:                                                                     #
#   uniprot_entries.tsv.lz4 - Processed and compressed UniProt entries file    #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
generate_uniprot_entries() {
  local old_ifs="$IFS"
  IFS=","
  local db_types_array=($1)
  IFS="$old_ifs"

  local temp_dir="$2"
  local temp_constant="$3"
  local output_dir="$4"

	have "$output_dir/taxons.tsv.lz4" || return
	log "Started generating the uniprot_entries file."

  generate_stdout() {
    # Print the header
    local idx=0

    while [[ "$idx" -ne "${#db_types_array}" ]] && [[ -n $(echo "${db_types_array[$idx]}" | sed "s/\s//g") ]]
    do
      local db_file="${temp_dir:?}/${temp_constant}/${db_types_array[$idx]}/uniprot_raw.tsv.lz4"

      $CMD_LZ4CAT "$db_file"

      idx=$((idx + 1))
    done
  }

	generate_stdout "$1" | "$CURRENT_LOCATION"/helper_scripts/taxons-uniprots-tables \
		--peptide-min "5" \
		--peptide-max "50" \
		--taxons "$(luz "$output_dir/taxons.tsv.lz4")" \
		--peptides "/dev/null" \
		--uniprot-entries "$(lz "$output_dir/uniprot_entries.tsv.lz4")" \
		--ec "/dev/null" \
		--go "/dev/null" \
		--interpro "/dev/null"

  log "Finished generating the uniprot_entries file."
}

################################################################################
#                                    Main                                      #
#                                                                              #
# This is the main section of the script where arguments and options are       #
# processed and the generation of output tables is initiated.                  #
################################################################################

################################################################################
# parse_arguments                                                              #
#                                                                              #
# Parses command-line arguments and validates them.                            #
#                                                                              #
# Globals:                                                                     #
#   DB_TYPES     - Comma-separated list of database sources                    #
#   OUTPUT_DIR   - Directory to save the output files                          #
#   TEMP_DIR     - Temporary directory for intermediate files                  #
#                                                                              #
# Arguments:                                                                   #
#   Command-line arguments                                                     #
#                                                                              #
# Outputs:                                                                     #
#   None                                                                       #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --database-sources)
        DB_TYPES="$2"
        # Check if the input is a valid list of database type identifiers
        if ! [[ "$DB_TYPES" =~ ^(swissprot|trembl)(,(swissprot|trembl))*$ ]]; then
          echo "Error: --database-sources must be a comma-separated list containing only 'swissprot', 'trembl', or both."
          exit 1
        fi
        shift 2
        ;;
      --output-dir)
        OUTPUT_DIR="$2"
        shift 2
        ;;
      --temp-dir)
        TEMP_DIR="$2"
        shift 2
        ;;
      *)
        echo "Unknown argument: $1"
        exit 1
        ;;
    esac
  done

  # Check if OUTPUT_DIR is specified
  if [[ -z "$OUTPUT_DIR" ]]; then
    echo "Error: --output-dir is required"
    exit 1
  fi
}

# Now, start running the actual script and all of it's functions

# Check if all the dependencies are installed
checkdep curl
checkdep uuidgen
checkdep pv
checkdep lz4
checkdep pigz

parse_arguments "$@"
create_taxon_tables "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
download_and_process_uniprot "$DB_TYPES" "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT"
generate_uniprot_entries "$DB_TYPES" "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
fetch_ec_numbers "$OUTPUT_DIR"
fetch_go_terms "$OUTPUT_DIR"
fetch_interpro_entries "$OUTPUT_DIR"
fetch_reference_proteomes "$OUTPUT_DIR"
extract_uniprot_version "$OUTPUT_DIR"
