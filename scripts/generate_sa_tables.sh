#! /usr/bin/env bash

set -eo pipefail

# All references to an external script should be relative to the location of this script.
# See: http://mywiki.wooledge.org/BashFAQ/028
CURRENT_LOCATION="${BASH_SOURCE%/*}"


################################################################################
#                                    Imports                                   #
################################################################################

# Imports global variables from the helper script.
# Globals imported:
#   - SOURCE_URLS: Associative array mapping database types to download URLs
#   - CMD_LZ4: Command or path to the lz4 binary
source "${CURRENT_LOCATION}/generate_tables_helper.sh"

################################################################################
#                            Variables and options                             #
################################################################################

# Directory used to store temporary files in
TEMP_DIR="/tmp"

DB_TYPES="swissprot,trembl"

# Constant string used to indicate temp files generated by Unipept
UNIPEPT_TEMP_CONSTANT="unipept_temp"

# Make sure that all temporary files are cleaned up if something goes wrong during execution of this script
trap terminateAndExit SIGINT
trap errorAndExit ERR
trap clean EXIT

################################################################################
#                           TABLE GENERATION FUNCTIONS                         #
#                                                                              #
# This section contains functions responsible for generating the required      #
# tables within the script. These functions handle all the necessary logic     #
# and operations to build and manage the data tables.                          #
################################################################################

################################################################################
# download_and_process_uniprot                                                 #
#                                                                              #
# Downloads and parses UniProtKB databases specified as a comma-separated list #
# in the first argument ($1). The function supports "swissprot" and "trembl".  #
# For each database type, it attempts to download, decompress, and convert it  #
# to a tabular format, storing the result in the uniprot_entries.tsv.lz4 file  #
# as a result.                                                                 #
#                                                                              #
# Globals:                                                                     #
#   CURRENT_LOCATION   - Current script directory                              #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Comma-separated list of database sources to download. Supported       #
#        values are "swissprot" and "trembl".                                  #
#   $2 - Temporary directory used to store intermediate files                  #
#   $3 - Temporary constant to identify this script's files in the temp dir    #
#   $4 - Output directory where the resulting files will be created            #
#                                                                              #
# Outputs:                                                                     #
#   uniprot_entries.tsv.lz4 - Processed and compressed UniProt entries file    #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
download_and_process_uniprot() {
  local db_types="$1"
  local temp_dir="$2"
  local temp_constant="$3"
  local output_dir="$4"

  have "$output_dir/taxons.tsv.lz4" || return

  log "Started generating the uniprot_entries file."

  download_uniprot "$db_types" \
  | "$CURRENT_LOCATION"/rust-utils/target/release/uniprot-parser \
      --taxa "$(luz "$output_dir/taxons.tsv.lz4")" \
      --proteomes "$(lz "$temp_dir/$temp_constant/proteomes.tsv.lz4")" \
      --uniprot-entries "$(lz "$output_dir/uniprot_entries.tsv.lz4")"

  log "Finished generating the uniprot_entries file."
}

################################################################################
# compute_reference_proteomes                                                  #
#                                                                              #
# Processes and computes reference proteomes by joining proteome data with     #
# reference proteome data. The resulting data is sorted, formatted, and        #
# compressed into a file named proteomes.tsv.lz4 in the output directory.      #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT - Command or path to the lz4cat binary                          #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory used to store intermediate files                  #
#   $2 - Temporary constant to identify this script's files in the temp dir    #
#   $3 - Output directory where the resulting files will be created            #
#                                                                              #
# Outputs:                                                                     #
#   proteomes.tsv.lz4 - Processed and compressed reference proteomes file      #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
compute_reference_proteomes() {
  local temp_dir="$1"
  local temp_constant="$2"
  local output_dir="$3"

  have "$temp_dir/$temp_constant/proteomes.tsv.lz4" || return
  have "$temp_dir/$temp_constant/reference_proteomes.tsv.lz4" || return

  log "Started computing reference proteomes."

  $CMD_LZ4CAT "$temp_dir/$temp_constant/proteomes.tsv.lz4" | sort | collapse \
    | join --nocheck-order -a2 -e '' -t $'\t' -o "2.1 2.2 2.3 1.2" - "$(luz "$temp_dir/$temp_constant/reference_proteomes.tsv.lz4")" \
    | cat -n \
    | sed "s/^ *//" \
    | $CMD_LZ4 \
    > "$output_dir/proteomes.tsv.lz4"

    log "Finished computing reference proteomes."
}

################################################################################
#                                    Main                                      #
#                                                                              #
# This is the main section of the script where arguments and options are       #
# processed and the generation of output tables is initiated.                  #
################################################################################

################################################################################
# parse_arguments                                                              #
#                                                                              #
# Parses command-line arguments and validates them.                            #
#                                                                              #
# Globals:                                                                     #
#   DB_TYPES     - Comma-separated list of database sources                    #
#   OUTPUT_DIR   - Directory to save the output files                          #
#   TEMP_DIR     - Temporary directory for intermediate files                  #
#                                                                              #
# Arguments:                                                                   #
#   Command-line arguments                                                     #
#                                                                              #
# Outputs:                                                                     #
#   None                                                                       #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --help)
        print_help
        exit 0
        ;;
      --database-sources)
        DB_TYPES="$2"
        # Check if the input is a valid list of database type identifiers
        if ! [[ "$DB_TYPES" =~ ^(swissprot|trembl)(,(swissprot|trembl))*$ ]]; then
          echo "Error: --database-sources must be a comma-separated list containing only 'swissprot', 'trembl', or both."
          echo ""
          print_help
          exit 1
        fi
        shift 2
        ;;
      --output-dir)
        OUTPUT_DIR="$2"
        shift 2
        ;;
      --temp-dir)
        TEMP_DIR="$2"
        shift 2
        ;;
      *)
        echo "Unknown argument: $1"
        echo ""
        print_help
        exit 1
        ;;
    esac
  done

  # Check if OUTPUT_DIR is specified
  if [[ -z "$OUTPUT_DIR" ]]; then
    echo "Error: --output-dir is required"
    echo ""
    print_help
    exit 1
  fi
}

################################################################################
# print_help                                                                   #
#                                                                              #
# Prints the usage information, including details for all supported options.   #
#                                                                              #
# Outputs:                                                                     #
#   Prints the usage information to the console.                               #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
print_help() {
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  --output-dir        Directory to save the output files (required)."
  echo "  --database-sources  Comma-separated list of database sources ('swissprot', 'trembl'), (optional, default: 'swissprot,trembl')."
  echo "  --temp-dir          Temporary directory for intermediate files (optional, default: '/tmp')."
  echo "  --help              Prints this help message."
  echo ""
  echo "Examples:"
  echo "  $0 --database-sources swissprot,trembl --output-dir /path/to/output"
  echo "  $0 --database-sources swissprot --output-dir /path/to/output --temp-dir /custom/tmp"
  echo ""
}

# Now, start running the actual script and all of it's functions

# Check if all the dependencies are installed
checkdep cargo "Rust toolchain"
checkdep curl
checkdep uuidgen
checkdep pv
checkdep lz4
checkdep pigz
checkdep xmllint "libxml2-utils"

parse_arguments "$@"
checkDirectoryAndCreate "$TEMP_DIR/$UNIPEPT_TEMP_CONSTANT"
build_binaries "taxdmp-parser" "uniprot-parser"
create_taxon_tables "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
download_and_process_uniprot "$DB_TYPES" "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
fetch_ec_numbers "$OUTPUT_DIR"
fetch_go_terms "$OUTPUT_DIR"
fetch_interpro_entries "$OUTPUT_DIR"
fetch_reference_proteomes "$TEMP_DIR/$UNIPEPT_TEMP_CONSTANT"
compute_reference_proteomes "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
extract_uniprot_version "$OUTPUT_DIR"
