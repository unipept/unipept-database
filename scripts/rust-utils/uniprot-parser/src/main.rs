use std::path::PathBuf;
use anyhow::{Context, Result};
use clap::Parser;
use dat_parser::uniprot_dat_parser;
use tables_generator::table_writer::{EntryTableWriter};
use utils::open_sin;

fn main() -> Result<()> {
    let args = Cli::parse();

    let reader = open_sin();
    let mut writer = EntryTableWriter::new(
        &args.taxa,
        &args.uniprot_entries,
    ).context("Unable to instantiate TableWriter")?;

    //write_header();
    let parser = uniprot_dat_parser(reader, args.threads);

    for entry in parser {
        let parsed_entry = entry.context("Failed to parse entry")?;
        writer
            .write(parsed_entry.into())
            .context("Failed to store entry")?;
    }

    Ok(())
}

#[derive(Parser, Debug)]
struct Cli {
    /// Path to the taxa.tsv file (generated by taxdmp-parser)
    #[clap(long)]
    taxa: PathBuf,

    /// Path to the UniProt output file
    #[clap(long)]
    uniprot_entries: PathBuf,

    /// Amount of threads to use for parsing
    #[clap(long, default_value_t = 0)]
    threads: usize,
}
