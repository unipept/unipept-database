#! /usr/bin/env bash

set -eo pipefail

# All references to an external script should be relative to the location of this script.
# See: http://mywiki.wooledge.org/BashFAQ/028
CURRENT_LOCATION="${BASH_SOURCE%/*}"


################################################################################
#                                    Imports                                   #
################################################################################

# Imports various helper variables.
# Globals imported from generate_tables_helper.sh:
#   - SORT_MEMORY
#   - CMD_SORT
#   - CMD_LZ4
#   - CMD_LZ4CAT
#   - PEPTIDE_MIN_LENGTH
#   - PEPTIDE_MAX_LENGTH
source "${CURRENT_LOCATION}/generate_tables_helper.sh"

################################################################################
#                            Variables and options                             #
################################################################################

# Directory used to store temporary files in
TEMP_DIR="/tmp"

DB_TYPES="swissprot,trembl"

# What is the length (k) of the K-mer peptides?
KMER_LENGTH=9

# Constant string used to indicate temp files generated by Unipept
UNIPEPT_TEMP_CONSTANT="unipept_temp"

# How much memory is the GNU sort utility allowed to use? This parameter should be formatted according to format
# accepted by the sort command.
SORT_MEMORY="2G"

# Which sort command should I use?
CMD_SORT="sort --buffer-size=$SORT_MEMORY --parallel=4"

# What is the minimum length (inclusive) for tryptic peptides?"
PEPTIDE_MIN_LENGTH=5
# What is the maximum length (inclusive) for tryptic peptides?"
PEPTIDE_MAX_LENGTH=50

# Make sure that all temporary files are cleaned up if something goes wrong during execution of this script
trap terminateAndExit SIGINT
trap errorAndExit ERR
trap clean EXIT

################################################################################
#                           TABLE GENERATION FUNCTIONS                         #
#                                                                              #
# This section contains functions responsible for generating the required      #
# tables within the script. These functions handle all the necessary logic     #
# and operations to build and manage the data tables.                          #
################################################################################

################################################################################
# download_and_process_uniprot                                                 #
#                                                                              #
# Downloads and parses UniProtKB databases specified as a comma-separated list #
# in the first argument ($1). The function supports "swissprot" and "trembl".  #
# For each database type, it attempts to download, decompress, and convert it  #
# to a tabular format, storing the result in a compressed file in the output   #
# directory.                                                                   #
#                                                                              #
# Globals:                                                                     #
#   SOURCE_URLS       - Associative array mapping database types to download   #
#                       URLs                                                   #
#   CMD_LZ4           - Command or path to the lz4 binary                      #
#   CURRENT_LOCATION  - Current script directory                               #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Comma-separated list of database sources to download. Supported       #
#        values are "swissprot" and "trembl".                                  #
#   $2 - Temporary directory used to store intermediate files                  #
#   $3 - Temporary constant to identify this script's files in the temp dir    #
#                                                                              #
# Outputs:                                                                     #
#   uniprot_raw.tsv.lz4 for each database type                                 #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
download_and_process_uniprot() {
  local old_ifs="$IFS"
  IFS=","
  local db_types_array=($1)
  IFS="$old_ifs"

  local temp_dir="$2"
  local temp_constant="$3"

  local idx=0

  while [[ "$idx" -ne "${#db_types_array}" ]] && [[ -n $(echo "${db_types_array[$idx]}" | sed "s/\s//g") ]]
  do
    local db_type=${db_types_array[$idx]}
    local db_source=${SOURCE_URLS["$db_type"]}

    log "Started downloading and parsing UniProtKB - $db_type."

    # Where should we store the index of this converted database.
    local db_output_dir="${temp_dir:?}/${temp_constant}/$db_type"

    # Remove previous database (if it exist) and continue building the new database.
    rm -rf "$db_output_dir"
    mkdir -p "$db_output_dir"

    # Extract the total size of the database that's being downloaded. This is required for pv to know which percentage
    # of the total download has been processed.
    local size="$(curl -I "$db_source" -s | grep -i content-length | tr -cd '[0-9]')"

    # Effectively download the database and convert to a tabular format
    curl --continue-at - --create-dirs "$db_source" --silent | pv -i 5 -n -s "$size" 2> >(reportProgress - "Downloading and parsing database for $db_type" >&2) | pigz -dc | "$CURRENT_LOCATION"/helper_scripts/dat-parser -t "$db_type" | $CMD_LZ4 > "${db_output_dir}/uniprot_raw.tsv.lz4"

    log "Finished downloading and parsing UniProtKB - $db_type."

    idx=$((idx + 1))
  done
}

################################################################################
# generate_uniprot_entries                                                     #
#                                                                              #
# Reads a raw, compressed UniProt TSV file (as generated by the                #
# download_and_process_uniprot function) provided as the first argument ($1)   #
# and produces the uniprot_entries.tsv.lz4 file as a result.                   #
#                                                                              #
# Globals:                                                                     #
#   CURRENT_LOCATION   - Current script directory                              #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Comma-separated list of database sources to download. Supported       #
#        values are "swissprot" and "trembl".                                  #
#   $2 - Temporary directory used to store intermediate files                  #
#   $3 - Temporary constant to identify this script's files in the temp dir    #
#   $4 - Output directory where the resulting files will be created            #
#                                                                              #
# Outputs:                                                                     #
#   uniprot_entries.tsv.lz4 - Processed and compressed UniProt entries file    #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
generate_uniprot_entries() {
  local old_ifs="$IFS"
  IFS=","
  local db_types_array=($1)
  IFS="$old_ifs"

  local temp_dir="$2"
  local temp_constant="$3"
  local output_dir="$4"

	have "$output_dir/taxons.tsv.lz4" || return
	log "Started generating the uniprot_entries file."

  generate_stdout() {
    # Print the header
    local idx=0

    while [[ "$idx" -ne "${#db_types_array}" ]] && [[ -n $(echo "${db_types_array[$idx]}" | sed "s/\s//g") ]]
    do
      local db_file="${temp_dir:?}/${temp_constant}/${db_types_array[$idx]}/uniprot_raw.tsv.lz4"

      $CMD_LZ4CAT "$db_file"

      idx=$((idx + 1))
    done
  }

	generate_stdout "$1" | "$CURRENT_LOCATION"/helper_scripts/taxons-uniprots-tables \
		--peptide-min "5" \
		--peptide-max "50" \
		--taxons "$(luz "$output_dir/taxons.tsv.lz4")" \
		--peptides "/dev/null" \
		--uniprot-entries "$(lz "$output_dir/uniprot_entries.tsv.lz4")" \
		--ec "/dev/null" \
		--go "/dev/null" \
		--interpro "/dev/null"

  log "Finished generating the uniprot_entries file."
}

################################################################################
# generate_proteins_and_sequences                                              #
#                                                                              #
# Reads a raw, compressed UniProt TSV file (as generated by the                #
# download_and_process_uniprot function) provided as the first argument ($1)   #
# and processes it to generate taxon-related tables and a sequences table      #
# containing in-silico tryptically digested peptides. The function also sorts  #
# and compresses the peptide output.                                           #
#                                                                              #
# Globals:                                                                     #
#   CURRENT_LOCATION   - Current script directory                              #
#   CMD_LZ4CAT         - Command or path to the lz4cat binary                  #
#   CMD_SORT           - Command or path to the sort utility                   #
#   PEPTIDE_MIN_LENGTH - Minimum length for peptides                           #
#   PEPTIDE_MAX_LENGTH - Maximum length for peptides                           #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Comma-separated list of database sources to process. Supported        #
#        values are "swissprot" and "trembl".                                  #
#   $2 - Temporary directory used to store intermediate files                  #
#   $3 - Temporary constant to identify this script's files in the temp dir    #
#   $4 - Output directory where the resulting files will be created            #
#   $5 - Minimum length for tryptic peptides                                   #
#   $6 - Maximum length for tryptic peptides                                   #
#                                                                              #
# Outputs:                                                                     #
#   peptides-equalized.tsv.lz4 - Sorted and compressed peptide table           #
#   uniprot_entries.tsv.lz4    - Processed and compressed UniProt entries file #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
generate_proteins_and_sequences() {
  local old_ifs="$IFS"
  IFS=","
  local db_types_array=($1)
  IFS="$old_ifs"

  local temp_dir="$2"
  local temp_constant="$3"
  local output_dir="$4"
  local peptide_min_length="$5"
  local peptide_max_length="$6"

	have "$output_dir/taxons.tsv.lz4" || return
	log "Started generating the uniprot_entries file."

  generate_stdout() {
    # Print the header
    local idx=0

    while [[ "$idx" -ne "${#db_types_array}" ]] && [[ -n $(echo "${db_types_array[$idx]}" | sed "s/\s//g") ]]
    do
      local db_file="${temp_dir:?}/${temp_constant}/${db_types_array[$idx]}/uniprot_raw.tsv.lz4"

      $CMD_LZ4CAT "$db_file"

      idx=$((idx + 1))
    done
  }

	generate_stdout "$1" | "$CURRENT_LOCATION"/helper_scripts/taxons-uniprots-tables \
		--peptide-min "$peptide_min_length" \
		--peptide-max "$peptide_max_length" \
		--taxons "$(luz "$output_dir/taxons.tsv.lz4")" \
		--peptides "$(lz "$temp_dir/$temp_constant/peptides-out.tsv.lz4")" \
		--uniprot-entries "$(lz "$output_dir/uniprot_entries.tsv.lz4")" \
		--ec "/dev/null" \
		--go "/dev/null" \
		--interpro "/dev/null"

  log "Started sorting peptides table"

  $CMD_LZ4CAT "$temp_dir/$temp_constant/peptides-out.tsv.lz4" \
   | LC_ALL=C $CMD_SORT -k2 \
   | $CMD_LZ4 > "$temp_dir/$temp_constant/peptides-equalized.tsv.lz4"

  log "Removing peptides-out.tsv.lz4"
  rm "$temp_dir/$temp_constant/peptides-out.tsv.lz4"
  log "Finished calculation of most tables with status $?"

  log "Finished generating the uniprot_entries file."
}

################################################################################
# number_sequences                                                             #
#                                                                              #
# Creates a unique sequence numbering for peptides. The function takes an      #
# input file of peptides, extracts two columns (representing sequences and     #
# related data), sorts and merges them, and assigns unique numeric IDs to the  #
# resulting sequences. The output is a compressed file containing the numbered #
# sequences.                                                                   #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT - Command or path to the lz4cat binary                          #
#   CMD_SORT   - Command or path to the sort utility                           #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory used to store intermediate files                  #
#   $2 - Temporary constant to identify this script's files in the temp dir    #
#                                                                              #
# Outputs:                                                                     #
#   sequences.tsv.lz4 - Compressed file with numbered peptide sequences        #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
number_sequences() {
  local temp_dir="$1"
  local temp_constant="$2"
  
  have "$temp_dir/$temp_constant/peptides-equalized.tsv.lz4" || return
	log "Started the numbering of sequences."

  rm -f "p_eq" "p_or"
	mkfifo "p_eq" "p_or"

	$CMD_LZ4CAT "$temp_dir/$temp_constant/peptides-equalized.tsv.lz4" | cut -f 3 | $CMD_SORT | uniq > "p_or" &
	$CMD_LZ4CAT "$temp_dir/$temp_constant/peptides-equalized.tsv.lz4" | cut -f 2 | uniq > "p_eq" &

	$CMD_SORT -u -m "p_or" "p_eq" | cat -n \
		| sed 's/^ *//' | $CMD_LZ4 - > "$temp_dir/$temp_constant/sequences.tsv.lz4"

	rm "p_eq" "p_or"

	log "Finished the numbering of sequences with status $?."
}

################################################################################
# substitute_aas                                                               #
#                                                                              #
# Substitutes amino acid sequences in the peptide data by their corresponding  #
# IDs from a sequences file. It performs two steps:                            #
# 1. Replaces equalized peptide sequences by their IDs.                        #
# 2. Replaces original peptide sequences by their IDs.                         #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT - Command or path to the lz4cat binary                          #
#   CMD_SORT   - Command or path to the sort utility                           #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory used to store intermediate files                  #
#   $2 - Temporary constant to identify this script's files in the temp dir    #
#                                                                              #
# Inputs:                                                                      #
#   peptides-equalized.tsv.lz4 - Input file with equalized peptide sequences    #
#   sequences.tsv.lz4          - Input file with IDs for peptide sequences     #
#                                                                              #
# Outputs:                                                                     #
#   peptides_by_equalized.tsv.lz4 - File with equalized sequences replaced by  #
#                                   their IDs                                  #
#   peptides_by_original.tsv.lz4  - File with original sequences replaced by   #
#                                   their IDs                                  #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
substitute_aas() {
  local temp_dir="$1"
  local temp_constant="$2"

  have "$temp_dir/$temp_constant/peptides-equalized.tsv.lz4" "$temp_dir/$temp_constant/sequences.tsv.lz4"

  log "Started the substitution of equalized AA's by ID's for the peptides."
  $CMD_LZ4CAT "$temp_dir/$temp_constant/peptides-equalized.tsv.lz4" \
    | join -t '	' -o '1.1,2.1,1.3,1.4,1.5,1.6' -1 2 -2 2 - "$(luz "$temp_dir/$temp_constant/sequences.tsv.lz4")" \
    | $CMD_LZ4 - > "$temp_dir/$temp_constant/peptides_by_equalized.tsv.lz4"

  rm "$temp_dir/$temp_constant/peptides-equalized.tsv.lz4"
  log "Finished the substitution of equalized AA's by ID's for the peptides with status $?."

  log "Started the substitution of original AA's by ID's for the peptides."
  $CMD_LZ4CAT "$temp_dir/$temp_constant/peptides_by_equalized.tsv.lz4" \
    | LC_ALL=C $CMD_SORT -k 3b,3 \
    | join -t '	' -o '1.1,1.2,2.1,1.4,1.5,1.6' -1 3 -2 2 - "$(luz "$temp_dir/$temp_constant/sequences.tsv.lz4")" \
    | $CMD_LZ4 - > "$temp_dir/$temp_constant/peptides_by_original.tsv.lz4"

  log "Finished the substitution of original AA's by ID's for the peptides with status $?."
}

################################################################################
# calculate_equalized_lcas                                                     #
#                                                                              #
# Calculates the Least Common Ancestors (LCA) for equalized peptide sequences. #
# The function processes a table of peptides, extracts specific fields, and    #
# performs LCA calculations using lineage data. The results are compressed     #
# into an output file.                                                         #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT       - Command or path to the lz4cat binary                    #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory used to store intermediate files                  #
#   $2 - Temporary constant to identify this script's files in the temp dir    #
#   $3 - Output directory where the resulting LCA file will be saved           #
#                                                                              #
# Inputs:                                                                      #
#   peptides_by_equalized.tsv.lz4 - Input file containing peptide data         #
#   lineages.tsv.lz4             - Input file with lineage data                #
#                                                                              #
# Outputs:                                                                     #
#   LCAs_equalized.tsv.lz4 - File containing LCAs for equalized peptides       #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
calculate_equalized_lcas() {
  local temp_dir="$1"
  local temp_constant="$2"
  local output_dir="$3"

	have "$temp_dir/$temp_constant/peptides_by_equalized.tsv.lz4" || return

	log "Started the calculation of equalized LCA's."
	$CMD_LZ4CAT "$temp_dir/$temp_constant/peptides_by_equalized.tsv.lz4" | cut -f 2,6 \
		| $CURRENT_LOCATION/helper_scripts/lcas --infile "$(luz "$output_dir/lineages.tsv.lz4")" \
		| $CMD_LZ4 - > "$temp_dir/$temp_constant/LCAs_equalized.tsv.lz4"
	log "Finished the calculation of equalized LCA's (after substituting AA's by ID's) with status $?."
}

################################################################################
# calculate_original_lcas                                                      #
#                                                                              #
# Calculates the Loewst Common Ancestors (LCA) for original peptide sequences. #
# The function processes a table of peptides, extracts specific fields, and    #
# performs LCA calculations using lineage data. The results are compressed     #
# into an output file.                                                         #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT       - Command or path to the lz4cat binary                    #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory used to store intermediate files                  #
#   $2 - Temporary constant to identify this script's files in the temp dir    #
#   $3 - Output directory where the resulting LCA file will be saved           #
#                                                                              #
# Inputs:                                                                      #
#   peptides_by_original.tsv.lz4 - Input file containing peptide data          #
#   lineages.tsv.lz4              - Input file with lineage data               #
#                                                                              #
# Outputs:                                                                     #
#   LCAs_original.tsv.lz4 - File containing LCAs for original peptides         #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
calculate_original_lcas() {
  local temp_dir="$1"
  local temp_constant="$2"
  local output_dir="$3"

	have "$temp_dir/$temp_constant/peptides_by_original.tsv.lz4" || return

	log "Started the calculation of original LCA's"

	$CMD_LZ4CAT "$temp_dir/$temp_constant/peptides_by_original.tsv.lz4" | cut -f 3,6 \
		| $CURRENT_LOCATION/helper_scripts/lcas --infile "$(luz "$output_dir/lineages.tsv.lz4")" \
		| $CMD_LZ4 - > "$temp_dir/$temp_constant/LCAs_original.tsv.lz4"
	log "Finished the calculation of original LCA's (after substituting AA's by ID's) with status $?."
}

################################################################################
# calculate_equalized_fas                                                      #
#                                                                              #
# Calculates Functional Annotations (FA) for equalized peptide sequences.      #
# The function extracts specific fields of peptide data and passes them to a   #
# helper script for functional analysis. Results are compressed into an output #
# file.                                                                        #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT       - Command or path to the lz4cat binary                    #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory used to store intermediate files                  #
#   $2 - Temporary constant to identify this script's files in the temp dir    #
#                                                                              #
# Inputs:                                                                      #
#   peptides_by_equalized.tsv.lz4 - Input file containing peptide data         #
#                                                                              #
# Outputs:                                                                     #
#   FAs_equalized.tsv.lz4 - File containing functional annotations for          #
#                           equalized peptides                                 #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
calculate_equalized_fas() {
  local temp_dir="$1"
  local temp_constant="$2"

	have "$temp_dir/$temp_constant/peptides_by_equalized.tsv.lz4" || return

	log "Started the calculation of equalized FA's."
	rm -f "peptides_eq"
	mkfifo "peptides_eq"
	$CMD_LZ4CAT "$temp_dir/$temp_constant/peptides_by_equalized.tsv.lz4" | cut -f2,5 > "peptides_eq" &
	$CURRENT_LOCATION/helper_scripts/functional-analysis -i "peptides_eq" -o "$(lz "$temp_dir/$temp_constant/FAs_equalized.tsv.lz4")"
	rm "peptides_eq"
	log "Finished the calculation of equalized FA's with status $?."
}

################################################################################
# calculate_original_fas                                                       #
#                                                                              #
# Calculates Functional Annotations (FA) for original peptide sequences.       #
# The function extracts specific fields of peptide data and passes them to a   #
# helper script for functional analysis. Results are compressed into an output #
# file.                                                                        #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT       - Command or path to the lz4cat binary                    #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory used to store intermediate files                  #
#   $2 - Temporary constant to identify this script's files in the temp dir    #
#                                                                              #
# Inputs:                                                                      #
#   peptides_by_original.tsv.lz4 - Input file containing peptide data          #
#                                                                              #
# Outputs:                                                                     #
#   FAs_original.tsv.lz4 - File containing functional annotations for           #
#                          original peptides                                   #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
calculate_original_fas() {
  local temp_dir="$1"
  local temp_constant="$2"

	have "$temp_dir/$temp_constant/peptides_by_original.tsv.lz4" || return
	
	log "Started the calculation of original FA's."
	rm -f "peptides_orig"
	mkfifo "peptides_orig"
	$CMD_LZ4CAT "$temp_dir/$temp_constant/peptides_by_original.tsv.lz4" | cut -f3,5 > "peptides_orig" &
	$CURRENT_LOCATION/helper_scripts/functional-analysis -i "peptides_orig" -o "$(lz "$temp_dir/$temp_constant/FAs_original.tsv.lz4")"
	rm "peptides_orig"
	log "Finished the calculation of original FA's."
}

################################################################################
# create_sequence_table                                                        #
#                                                                              #
# Creates a unified sequences table by merging lineage and functional          #
# annotations (LCAs and FAs) for both original and equalized peptide sequences.#
# The resulting table is compressed and saved in the specified output          #
# directory.                                                                   #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT - Command or path to the lz4cat binary                          #
#   CMD_AWK    - Command or path to the awk utility                            #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Temporary directory containing intermediate files                     #
#   $2 - Temporary constant to identify intermediate files                     #
#   $3 - Output directory where the resulting sequences table will be saved    #
#                                                                              #
# Inputs:                                                                      #
#   LCAs_original.tsv.lz4  - Input file containing LCAs for original sequences #
#   LCAs_equalized.tsv.lz4 - Input file containing LCAs for equalized sequences#
#   FAs_original.tsv.lz4   - Input file containing FAs for original sequences  #
#   FAs_equalized.tsv.lz4  - Input file containing FAs for equalized sequences #
#   sequences.tsv.lz4      - Input file containing the sequence data           #
#                                                                              #
# Outputs:                                                                     #
#   sequences.tsv.lz4 - Compressed unified sequences table                     #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
create_sequence_table() {
  local temp_dir="$1"
  local temp_constant="$2"
  local output_dir="$3"

	have "$temp_dir/$temp_constant/LCAs_original.tsv.lz4" "$temp_dir/$temp_constant/LCAs_equalized.tsv.lz4" "$temp_dir/$temp_constant/FAs_original.tsv.lz4" "$temp_dir/$temp_constant/FAs_equalized.tsv.lz4" "$temp_dir/$temp_constant/sequences.tsv.lz4" || return
	log "Started the creation of the sequences table."
	mkdir -p "$output_dir"
	rm -f "olcas" "elcas" "ofas" "efas"
	mkfifo "olcas" "elcas" "ofas" "efas"
	$CMD_LZ4CAT "$temp_dir/$temp_constant/LCAs_original.tsv.lz4"  | $CMD_AWK '{ printf("%012d\t%s\n", $1, $2) }' > "olcas" &
	$CMD_LZ4CAT "$temp_dir/$temp_constant/LCAs_equalized.tsv.lz4" | $CMD_AWK '{ printf("%012d\t%s\n", $1, $2) }' > "elcas" &
	$CMD_LZ4CAT "$temp_dir/$temp_constant/FAs_original.tsv.lz4"   | $CMD_AWK '{ printf("%012d\t%s\n", $1, $2) }' > "ofas" &
	$CMD_LZ4CAT "$temp_dir/$temp_constant/FAs_equalized.tsv.lz4"  | $CMD_AWK '{ printf("%012d\t%s\n", $1, $2) }' > "efas" &
	$CMD_LZ4CAT "$temp_dir/$temp_constant/sequences.tsv.lz4"      | $CMD_AWK '{ printf("%012d\t%s\n", $1, $2) }' \
		| join --nocheck-order -a1 -e '\N' -t '	' -o "1.1 1.2 2.2" - "olcas" \
		| join --nocheck-order -a1 -e '\N' -t '	' -o "1.1 1.2 1.3 2.2" - "elcas" \
		| join --nocheck-order -a1 -e '\N' -t '	' -o '1.1 1.2 1.3 1.4 2.2' - "ofas" \
		| join --nocheck-order -a1 -e '\N' -t '	' -o '1.1 1.2 1.3 1.4 1.5 2.2' - "efas" \
		| sed 's/^0*//' \
		| $CMD_LZ4 - > "$output_dir/sequences.tsv.lz4"
	rm "olcas" "elcas" "ofas" "efas"
	log "Finished the creation of the sequences table."
}

################################################################################
# create_kmer_index                                                            #
#                                                                              #
# Creates a k-mer index based on UniProt entries and taxonomy data. The        #
# function reads the compressed UniProt entries file and generates an index    #
# for k-mers of the specified length. The index is written to a file in the    #
# output directory.                                                            #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT - Command or path to the lz4cat binary                          #
#   CMD_SORT   - Command or path to the sort utility                           #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Output directory where k-mer index will be saved                      #
#   $2 - Length (k) of the k-mers                                              #
#                                                                              #
# Outputs:                                                                     #
#   Writes a file named <kmer_length>-mer.index in the output directory        #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
create_kmer_index() {
  local output_dir="$1"
  local kmer_length="$2"

	have "$output_dir/uniprot_entries.tsv.lz4" "$output_dir/taxons.tsv.lz4" || return

	log "Started the construction of the $kmer_length-mer index."

	for prefix in A C D E F G H I K L M N P Q R S T V W Y; do
		pv -N $prefix "$output_dir/uniprot_entries.tsv.lz4" \
			| $CMD_LZ4CAT \
			| cut -f4,7 \
			| grep "^[0-9]*	[ACDEFGHIKLMNPQRSTVWY]*$" \
			| umgap splitkmers -k"$kmer_length" \
			| sed -n "s/^$prefix//p" \
			| LC_ALL=C $CMD_SORT \
			| sed "s/^/$prefix/"
	done \
			| umgap joinkmers "$(luz "$output_dir/taxons.tsv.lz4")" \
			| cut -d'	' -f1,2 \
			| umgap buildindex \
			> "$output_dir/$kmer_length-mer.index"
	log "Finished the construction of the $kmer_length-mer index."
}

################################################################################
# create_tryptic_index                                                         #
#                                                                              #
# Creates a tryptic peptide index based on sequences data. The function reads  #
# the compressed sequences file, processes it to remove invalid entries, and   #
# generates an index for tryptic peptides.                                     #
#                                                                              #
# Globals:                                                                     #
#   CMD_LZ4CAT - Command or path to the lz4cat binary                          #
#                                                                              #
# Arguments:                                                                   #
#   $1 - Output directory where the tryptic index will be saved                #
#                                                                              #
# Inputs:                                                                      #
#   sequences.tsv.lz4 - Compressed input file containing sequence data         #
#                                                                              #
# Outputs:                                                                     #
#   tryptic.index - File containing the tryptic index                          #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
create_tryptic_index() {
  local output_dir="$1"

	have "$output_dir/sequences.tsv.lz4" || return

	log "Started the construction of the tryptic index."
	pv "$output_dir/sequences.tsv.lz4" \
		| $CMD_LZ4CAT \
		| cut -f2,3 \
		| grep -v "\\N" \
		| umgap buildindex \
		> "$output_dir/tryptic.index"
	log "Finished the construction of the tryptic index."
}

################################################################################
#                                    Main                                      #
#                                                                              #
# This is the main section of the script where arguments and options are       #
# processed and the generation of output tables is initiated.                  #
################################################################################

################################################################################
# parse_kmer_arguments                                                         #
#                                                                              #
# Parses command-line arguments and validates them for k-mer mode.             #
#                                                                              #
# Globals:                                                                     #
#   DB_TYPES     - Comma-separated list of database sources                    #
#   OUTPUT_DIR   - Directory to save the output files                          #
#   TEMP_DIR     - Temporary directory for intermediate files                  #
#   SORT_MEMORY  - Amount of memory to be used by the sort utility             #
#   KMER_LENGTH  - Length of k-mers for the index                              #
#                                                                              #
# Arguments:                                                                   #
#   Command-line arguments                                                     #
#                                                                              #
# Outputs:                                                                     #
#   None                                                                       #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
parse_kmer_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --database-sources)
        DB_TYPES="$2"
        # Check if the input is a valid list of database type identifiers
        if ! [[ "$DB_TYPES" =~ ^(swissprot|trembl)(,(swissprot|trembl))*$ ]]; then
          echo "Error: --database-sources must be a comma-separated list containing only 'swissprot', 'trembl', or both."
          print_help
          exit 1
        fi
        shift 2
        ;;
      --output-dir)
        OUTPUT_DIR="$2"
        shift 2
        ;;
      --temp-dir)
        TEMP_DIR="$2"
        shift 2
        ;;
      --sort-memory)
        SORT_MEMORY="$2"
        shift 2
        ;;
      --kmer-length)
        if ! [[ "$2" =~ ^[0-9]+$ ]]; then
          echo "Error: --kmer-length must be a positive integer."
          print_help
          exit 1
        fi
        KMER_LENGTH="$2"
        shift 2
        ;;
      --help)
        print_help
        exit 0
        ;;
      *)
        echo "Unknown argument: $1"
        print_help
        exit 1
        ;;
    esac
  done

  # Check if OUTPUT_DIR is specified
  if [[ -z "$OUTPUT_DIR" ]]; then
    echo "Error: --output-dir is required"
    print_help
    exit 1
  fi
}

################################################################################
# parse_tryptic_arguments                                                      #
#                                                                              #
# Parses command-line arguments and validates them for tryptic mode.           #
#                                                                              #
# Globals:                                                                     #
#   DB_TYPES          - Comma-separated list of database sources               #
#   OUTPUT_DIR        - Directory to save the output files                     #
#   TEMP_DIR          - Temporary directory for intermediate files             #
#   SORT_MEMORY       - Amount of memory to be used by the sort utility        #
#   MIN_PEPTIDE_LENGTH - Minimum length of tryptic peptides                    #
#   MAX_PEPTIDE_LENGTH - Maximum length of tryptic peptides                    #
#                                                                              #
# Arguments:                                                                   #
#   Command-line arguments                                                     #
#                                                                              #
# Outputs:                                                                     #
#   None                                                                       #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
parse_tryptic_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --database-sources)
        DB_TYPES="$2"
        # Check if the input is a valid list of database type identifiers
        if ! [[ "$DB_TYPES" =~ ^(swissprot|trembl)(,(swissprot|trembl))*$ ]]; then
          echo "Error: --database-sources must be a comma-separated list containing only 'swissprot', 'trembl', or both."
          print_help
          exit 1
        fi
        shift 2
        ;;
      --output-dir)
        OUTPUT_DIR="$2"
        shift 2
        ;;
      --temp-dir)
        TEMP_DIR="$2"
        shift 2
        ;;
      --sort-memory)
        SORT_MEMORY="$2"
        shift 2
        ;;
      --min-peptide-length)
        if ! [[ "$2" =~ ^[0-9]+$ ]]; then
          echo "Error: --min-peptide-length must be a positive integer."
          print_help
          exit 1
        fi
        PEPTIDE_MIN_LENGTH="$2"
        shift 2
        ;;
      --max-peptide-length)
        if ! [[ "$2" =~ ^[0-9]+$ ]]; then
          echo "Error: --max-peptide-length must be a positive integer."
          print_help
          exit 1
        fi
        PEPTIDE_MAX_LENGTH="$2"
        shift 2
        ;;
      --help)
        print_help
        exit 0
        ;;
      *)
        echo "Unknown argument: $1"
        print_help
        exit 1
        ;;
    esac
  done

  # Check if OUTPUT_DIR is specified
  if [[ -z "$OUTPUT_DIR" ]]; then
    echo "Error: --output-dir is required"
    print_tryptic_help
    exit 1
  fi
}


################################################################################
# print_help                                                                   #
#                                                                              #
# Prints the usage information, including details for all supported modes.     #
#                                                                              #
# Outputs:                                                                     #
#   Prints the usage information to the console.                               #
#                                                                              #
# Returns:                                                                     #
#   None                                                                       #
################################################################################
print_help() {
  echo "Usage: $0 <mode> [OPTIONS]"
  echo ""
  echo "Modes:"
  echo "  kmer    Creates a k-mer index based on UniProt entries."
  echo "  tryptic Creates a tryptic peptide index based on sequence data."
  echo ""
  echo "Options (common):"
  echo "  --output-dir        Directory to save the output files (required)."
  echo "  --database-sources  Comma-separated list of database sources ('swissprot', 'trembl'), (optional, default: 'swissprot,trembl')"
  echo "  --temp-dir          Temporary directory for intermediate files (optional, default: '/tmp')"
  echo "  --sort-memory       Amount of memory (e.g., '2G') for the sort utility (optional, default: '$SORT_MEMORY')"
  echo "  --help              Prints this help message."
  echo ""
  echo "Options for 'kmer' mode:"
  echo "  --kmer-length       Length of k-mers for the index (optional, default: $KMER_LENGTH). "
  echo ""
  echo "Options for 'tryptic' mode:"
  echo "  --min-peptide-length Minimum length of tryptic peptides (optional, default: $PEPTIDE_MIN_LENGTH)"
  echo "  --max-peptide-length Maximum length of tryptic peptides (optional, default: $PEPTIDE_MAX_LENGTH)."
  echo ""
  echo "Examples:"
  echo "  $0 kmer --database-sources swissprot,trembl --output-dir /path/to/output --kmer-length 7"
  echo "  $0 tryptic --database-sources swissprot --output-dir /path/to/output --min-peptide-length 6 --max-peptide-length 30"
  echo ""
}

################################################################################
# Main                                                                         #
################################################################################

if [[ $# -lt 1 ]]; then
  echo "Error: Mode must be specified as the first argument ('kmer' or 'tryptic')."
  print_help
  exit 1
fi

MODE="$1"  # First argument specifies the mode
shift      # Remove mode from arguments

# Check if all the required dependencies are installed
checkdep cargo "Rust toolchain"
checkdep curl
checkdep uuidgen
checkdep lz4
checkdep pigz
checkdep pv
checkdep umgap "umgap crate (for umgap buildindex)"

if [[ "$MODE" == "kmer" ]]; then
  parse_kmer_arguments "$@"
  build_binaries
  create_taxon_tables "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
  download_and_process_uniprot "$DB_TYPES" "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT"
  generate_uniprot_entries "$DB_TYPES" "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
  create_kmer_index "$OUTPUT_DIR" "$KMER_LENGTH"
elif [[ "$MODE" == "tryptic" ]]; then
  parse_tryptic_arguments "$@"
  build_binaries
  create_taxon_tables "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
  download_and_process_uniprot "$DB_TYPES" "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT"
  generate_proteins_and_sequences "$DB_TYPES" "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR" "$PEPTIDE_MIN_LENGTH" "$PEPTIDE_MAX_LENGTH"
  number_sequences "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT"
  substitute_aas "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT"
  calculate_equalized_lcas "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
  calculate_original_lcas "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
  calculate_equalized_fas "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT"
  calculate_original_fas "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT"
  create_sequence_table "$TEMP_DIR" "$UNIPEPT_TEMP_CONSTANT" "$OUTPUT_DIR"
  create_tryptic_index "$OUTPUT_DIR"
else
  echo "Error: Invalid mode '$MODE'. Supported modes are 'kmer' and 'tryptic'."
  exit 1
fi
